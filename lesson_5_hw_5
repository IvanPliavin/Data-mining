# Написать программу, которая собирает входящие письма из своего
# или тестового почтового ящика и сложить данные о письмах в базу
# данных (от кого, дата отправки, тема письма, текст письма полный)
# Логин тестового ящика: study.ai_172@mail.ru
# Пароль тестового ящика: NextPassword172


from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from pymongo import MongoClient
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
import time
from pprint import pprint

# Функция сбора данных
def mail_scrapper():
    data_dict = {}
    data_dict['contact'] = driver.find_element_by_class_name('letter-contact').text
    data_dict['date'] = driver.find_element_by_class_name('letter__date').text
    data_dict['title'] = driver.find_element_by_tag_name('h2').text
    data_dict['text'] = driver.find_element_by_class_name('letter-body').text
    data_list.append(data_dict)

# Функция сохранения в БД
def save_in_mongo(file):
    client = MongoClient('localhost', 27017)
    db = client['emails']
    emails = db.emails
    emails.insert_many(file)
    return emails

# Настраиваем драйвер
chrome_options = Options()
chrome_options.add_argument('start-maximized')
driver = webdriver.Chrome(options=chrome_options)
data_list = []

# Запускаем скрипт
driver.get('https://mail.ru')
login = driver.find_element_by_name('login')
login.send_keys('study.ai_172@mail.ru')
login.send_keys(Keys.ENTER)
time.sleep(1)

password = driver.find_element_by_name('password')
password.send_keys('NextPassword172')
password.send_keys(Keys.ENTER)
time.sleep(2)

try:
    first_el = driver.find_element_by_class_name('llc__content')
    first_el.click()
    while True:
        try:
            time.sleep(2)
            button = driver.find_element_by_xpath(
                '//span[@class="button2 button2_has-ico button2_arrow-down button2_pure button2_short button2_ico-text-top button2_hover-support js-shortcut"]')
            mail_scrapper()
            button.click()
        except:
            break
    mail_scrapper()
    print('Письма собраны')
    driver.quit()
    save_in_mongo(data_list)
except:
    print('Писем нет!')
    driver.quit()

#Написать программу, которая собирает «Хиты продаж» с сайта техники mvideo
# и складывает данные в БД. Магазины можно выбрать свои.
# Главный критерий выбора: динамически загружаемые товары

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from pymongo import MongoClient
import json
import time
from pprint import pprint

# Настраиваем драйвер
chrome_options = Options()
chrome_options.add_argument('start-maximized')
driver = webdriver.Chrome(options=chrome_options)
data_list = []

driver.get('https://www.mvideo.ru/')
time.sleep(2)


# Скролим страницу до целевого значения "Хиты продаж"
target = driver.find_element_by_xpath('//body/div[3]/div[1]/div[3]/div[1]/div[4]/div[1]/div[1]/div[1]/div[1]')
target.location_once_scrolled_into_view

# Собираем данные
items_list = []
info = 0
click = 0
while click < 6:
    items = driver.find_elements_by_xpath('//div[contains(text(), "Хиты продаж")][1]/../../..//div/ul/li//h4/a')
    for item in items:
        info = json.loads(item.get_attribute('data-product-info'))
        if info not in items_list:
            items_list.append(info)
    button = driver.find_element_by_xpath('//body/div[3]/div[1]/div[3]/div[1]/div[4]/div[1]/div[2]/div[1]/div[1]/a[2]')
    time.sleep(3)
    button.click()
    click += 1

# Функция сохранения в БД
def save_in_mongo(file):
    client = MongoClient('localhost', 27017)
    db = client['hits']
    hits = db.hits
    hits.insert_many(file)
    return hits

save_in_mongo(items_list)

